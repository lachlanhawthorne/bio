<html>
  <head>
    <style>
      #parent-element {
        position: relative; /* required for the pseudo-element */
        height: 100%;
        width: calc(100% - 33%); 
        overflow-x: clip;
        display: flex;
        /* justify-content: flex-start; */
        align-items: center;
        flex: 1;
        margin: 50px;
        margin-left: 0;
        margin-right: 0;
      }

      #shadow-element {
        position: absolute;
        top: 0;
        right: 0;
        width: 75%;
        height: 100%;
        background: linear-gradient(
          to left, 
          rgba(0, 0, 0, 1), 
          rgba(255, 255, 255, 0)
        );
        pointer-events: none;
      }
    </style>
  </head>
  <body>
      <div id="parent-element" class="justify-center mx-8 md:mx-0 md:justify-start">
      <div id="renderer-element" class="p-4 md:p-0 max-w-full"></div>
      <div id="shadow-element" class="p-4 md:p-0 max-w-full"></div>
    </div>
    
    <script>
      import * as THREE from "https://cdn.jsdelivr.net/npm/three@0.127.0/build/three.module.js";
      import {OrbitControls} from "https://cdn.jsdelivr.net/npm/three@0.127.0/examples/jsm/controls/OrbitControls.js";

      let parent = document.getElementById("parent-element");
      let scene = new THREE.Scene();
      let size = parent.clientHeight;

      let camera = new THREE.PerspectiveCamera(50, 1, 1, 1000);
      camera.position.set(5, 8, 13).setLength(12);
      let renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(size, size);
      document.getElementById("renderer-element").appendChild(renderer.domElement);

      let controls = new OrbitControls(camera, renderer.domElement);
      controls.enablePan = false;
      controls.enableZoom = false;

      let gpt = new THREE.IcosahedronGeometry(5, 10);
      var tex = new THREE.TextureLoader().load("https://threejs.org/examples/textures/sprites/disc.png");

      let mpt = new THREE.PointsMaterial({
        size: 0.25,
        map: tex,
        color: 0XCCCCCC,
      });
      
      let pt = new THREE.Points(gpt, mpt);
      scene.add(pt);

      window.addEventListener("resize", onResize);
      window.addEventListener("orientationchange", onResize);
      window.addEventListener("load", onResize);
      window.addEventListener("DOMContentLoaded", onResize);
      
      let rotationSpeed = 0.002;

      renderer.setAnimationLoop((_) => {
        pt.rotation.y += rotationSpeed;
        renderer.render(scene, camera);
      });

      function onResize() {
        let parent = document.getElementById("parent-element");
        let size = parent.clientHeight;

        let width = window.innerWidth;
        let height = window.innerHeight > 600 ? 600 : window.innerHeight;

        if(parent.clientHeight > height) {
          let newHeight = height - 200 < 300 ? 350 : height - 200;
          parent.style.height = newHeight + "px";
          renderer.setSize(width, newHeight);
          camera.aspect = width / newHeight;
          camera.updateProjectionMatrix(); 
        } else {
          renderer.setSize(size, size);
          camera.aspect = size / size;
          camera.updateProjectionMatrix();
        }

  // parent.style.height = height + "px";
  // renderer.setSize(width, height);
  // camera.aspect = width / height;
  // camera.updateProjectionMatrix();


      }

    </script>
  </body>
</html>
